var _           = require('lodash');
var https       = require('https');
var http        = require('http');
var querystring = require('querystring');
var q           = require('q');
var oauth       = require('app/oauth');
var moment      = require('moment');
var twitter     = require('twitter');

var TwitterApi = function(userId, screenName, oauthAccessToken, oauthAccessTokenSecret, consumerKey, consumerSecret, count){
    console.log('building twitter api');
    _.merge(this.config, {
        userId: userId,
        screenName: screenName,
        count: count,
        oauthAccessToken: oauthAccessToken,
        oauthAccessTokenSecret: oauthAccessTokenSecret,
        consumerKey: consumerKey,
        consumerSecret: consumerSecret
    });
};

TwitterApi.prototype = {

    generateNonce: function(){
        var text = "";
        var possible = "abcdefghijklmnopqrstuvwxyz0123456789";

        for( var i=0; i < 32; i++ )
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    },

    getBearerToken: function(){
        var deferred = q.defer();

        var bearerTokenCredentials = new Buffer (this.config.consumerKey + ':' + this.config.consumerSecret).toString('base64');

        var queryData = {
            grant_type: 'client_credentials'
        };

        var query = querystring.stringify(queryData);

        var request = https.request({
            host: 'api.twitter.com',
            path: '/oauth2/token?' + query,
            method: 'POST',
            headers: {
                'User-Agent': 'ang-test v0.0.1',
                'Authorization': 'Basic ' + bearerTokenCredentials + 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8'
            }
        }, function(res){
            res.setEncoding('utf8');
            res.on('data',function(data){
                var response = {};
                try {
                    response = JSON.parse(data);
                    if (response.access_token) {
                        deferred.resolve(response.access_token);
                    } else {
                        deferred.reject(new Error('bearer token can not be found in server response'));
                    }
                } catch (e) {
                    console.error('cant parse server response');
                    deferred.reject(new Error('unable to parse server response'));
                }
            })
        }).on('error', function(e){
            console.error(e.message);
            deferred.reject(new Error('Error: ' + e.message));
        });

        request.write('');
        request.end();

        return deferred.promise;
    },

    getRequestToken: function(url, query){
        var deferred = q.defer();

        //var consumer = oauth.createConsumer(this.config.consumerKey, this.config.consumerSecret);
        //var oauthSignature = oauth.createHmac(consumer);



        query = _.map(query, function(val, key) {
            return {key: key, value: val};
        });

        var signatureParams = query;
        var authorizationHeaders = [

        ];

        var method = 'POST';

        signatureParams.push( {key: 'oauth_callback', value: 'http://localhost:3000/#/userTweets'},
            {key: 'oauth_consumer_key', value: this.config.consumerKey},
            {key: 'oauth_nonce', value: this.generateNonce()},
            {key: 'oauth_signature', value: oauthSignature},
            {key: 'oauth_signature_method', value: "HMAC-SHA1"},
            {key: 'oauth_timestamp', value: moment(moment.utc()).unix()},
            {key: 'oauth_version', value: "1.0"});

        _.each(signatureParams, function(item, itemKey){
            signatureParams[itemKey].value = encodeURIComponent(item.value);
            signatureParams[itemKey].key = encodeURIComponent(item.key);
        });

        signatureParams = _.sortBy(signatureParams, 'key');

        var oauthSignature = oauth.buildSignature(signatureParams, url, method);

        var request = {
            host: 'api.twitter.com',
            method: 'POST',
            path: '/oauth/request_token',
            headers: {
                'User-Agent': 'ang-test v0.0.1',
                Authorization: 'OAuth oauth_callback="' + encodeURIComponent('http://localhost:3000/#/userTweets') + '",' +
                'oauth_consumer_key="' + encodeURIComponent(this.config.consumerKey) + '",' +
                'oauth_nonce="' + this.generateNonce() + '",' +
                'oauth_signature="' + encodeURIComponent(oauthSignature) + '",' +
                'oauth_signature_method="HMAC-SHA1",' +
                'oauth_timestamp="' + moment(moment.utc()).unix() + '",' +
                'oauth_version="1.0"'
            }
        };

        request = https.request(request, function(res){
            res.setEncoding('utf8');
            res.on('data',function(data){
                var response = {};
                try {
                    response = JSON.parse(data);
                    if (response.access_token) {
                        deferred.resolve(response.access_token);
                    } else {
                        deferred.reject(new Error('bearer token can not be found in server response'));
                    }
                } catch (e) {
                    console.error('cant parse server response');
                    deferred.reject(new Error('unable to parse server response'));
                }
            })
        }).on('error', function(e){
            console.error(e.message);
            deferred.reject(new Error('Error: ' + e.message));
        });
        request.write('');
        request.end();

        return deferred.promise;
    },

    get: function(url) {

        var deferred = q.defer();

        if (_.isUndefined(url)) {
            console.error('url is not defined');
            return;
        }

        var bearerToken = this.getBearerToken();

        var query = '&user_id=' + this.config.userId + '&count=' + this.config.count;

        bearerToken.then(function(token){
            var message = "";
            https.get({
                    host: 'api.twitter.com',
                    path: '/1.1' + url + query,
                    method: 'GET',
                    headers: {
                        'User-Agent': 'ang-test v0.0.1',
                        'Authorization': 'Bearer ' + token
                    }
                },
                function(res){
                    res.setEncoding('utf8');
                    res.on('data', function(chunk){
                        message += chunk;
                    });
                    res.on('end', function(){
                        var tweets = JSON.parse(message);
                        deferred.resolve(tweets);
                    })
                }).on('error', function(e) {
                    console.error(e.message);
                    deferred.reject(new Error('Error: ' + e.message));
                });
        });

        return deferred.promise;
    },

    requestByUser: function(fullUrl, queryParams){
        var deferred = q.defer();

        var requestToken = this.getRequestToken(fullUrl, queryParams);

        requestToken.then(function(token){
            console.log('my token', token);
            deferred.resolve(token);
        });


        return deferred.promise;
    }
};
TwitterApi.prototype.config = {
    count: 5
};
module.exports = TwitterApi;